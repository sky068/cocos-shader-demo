{
  "ver": "1.0.25",
  "uuid": "acfac1d9-a26a-43e7-a572-15b74289a7d3",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nuniform vec2 center;\nuniform float aspect;\nuniform float radius;\nuniform float life;\nuniform float band;\nuniform float amp;\nuniform float waves;\nuniform float speed;\nuniform float progress;\nvoid main() {\n  vec2 tc = v_uv0;\n  vec2 uv = vec2(1.0, 1.0);\n  vec2 p;\n  float len;\n  vec2 uv_offset;\n  float wave_width = band * radius;\n  p = (tc - center);\n  p.x = p.x * aspect;\n  len = length(p);\n  float current_progress = progress / life;\n  if (current_progress > 1.0) {\n      vec4 t_image = texture2D(texture,v_uv0);\n      gl_FragColor = t_image;\n      return;\n  }\n  float current_radius = radius * current_progress;\n  float damp_factor = 1.0;\n  if (current_progress > .5) {\n      damp_factor = (1.0 - current_progress) * 2.0;\n  }\n  float cut_factor = clamp(wave_width * damp_factor - abs(current_radius - len), 0.0, 1.0);\n  float waves_factor = waves * len / radius;\n  uv_offset = (p / len) * cos((waves_factor - current_progress * speed) * 3.14) * amp * cut_factor;\n  uv += uv_offset;\n  vec4 t_image = texture2D(texture, fract(tc + uv));\n  gl_FragColor = t_image;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nuniform FragConstants {\n  vec2 center;\n  float u_time;\n  float aspect;\n  float radius;\n  float life;\n  float band;\n  float amp;\n  float waves;\n  float speed;\n  float progress;\n};\nvoid main() {\n  vec2 tc = v_uv0;\n  vec2 uv = vec2(1.0, 1.0);\n  vec2 p;\n  float len;\n  vec2 uv_offset;\n  float wave_width = band * radius;\n  p = (tc - center);\n  p.x = p.x * aspect;\n  len = length(p);\n  float current_progress = progress / life;\n  if (current_progress > 1.0) {\n      vec4 t_image = texture2D(texture,v_uv0);\n      gl_FragColor = t_image;\n      return;\n  }\n  float current_radius = radius * current_progress;\n  float damp_factor = 1.0;\n  if (current_progress > .5) {\n      damp_factor = (1.0 - current_progress) * 2.0;\n  }\n  float cut_factor = clamp(wave_width * damp_factor - abs(current_radius - len), 0.0, 1.0);\n  float waves_factor = waves * len / radius;\n  uv_offset = (p / len) * cos((waves_factor - current_progress * speed) * 3.14) * amp * cut_factor;\n  uv += uv_offset;\n  vec4 t_image = texture2D(texture, fract(tc + uv));\n  gl_FragColor = t_image;\n}"
      }
    }
  ],
  "subMetas": {}
}