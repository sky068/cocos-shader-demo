// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
  #endif

  // const int numbers = 4;

  uniform FragConstants {
    vec2 center;
    float u_time;
    float aspect;
    float radius;
    float life;
    float band;
    float amp;
    float waves;
    float speed;
    float progress;
    // float centres[16];
  };

  void main() {
    vec2 tc = v_uv0;
    vec2 uv = vec2(1.0, 1.0);
    vec2 p;
    float len;
    vec2 uv_offset;
    float wave_width = band * radius;

    p = (tc - center);
    p.x = p.x * aspect;
    len = length(p);

    float current_progress = progress / life;
    if (current_progress > 1.0) {
        vec4 t_image = texture2D(texture,v_uv0);
        gl_FragColor = t_image;
        return;
    }

    float current_radius = radius * current_progress;
    float damp_factor = 1.0;
    if (current_progress > .5) {
        damp_factor = (1.0 - current_progress) * 2.0;
    }

    float cut_factor = clamp(wave_width * damp_factor - abs(current_radius - len), 0.0, 1.0);
    float waves_factor = waves * len / radius;
    uv_offset = (p / len) * cos((waves_factor - current_progress * speed) * 3.14) * amp * cut_factor;

    uv += uv_offset;
    
    vec4 t_image = texture2D(texture, fract(tc + uv));

    gl_FragColor = t_image;
  }
}%
